#!/usr/bin/env sh

set -o errexit

client_name={{ client }}

# Check if docker is installed
if ! command -v docker &> /dev/null; then
    echo "docker is not installed. Please install docker first."
    exit 1
fi

# Check if k3d is installed
if ! command -v k3d &> /dev/null; then
    echo "k3d is not installed. Please install k3d first."
    exit 1
fi

# Check if helm is installed
if ! command -v helm &> /dev/null; then
    echo "Helm is not installed. Please install Helm first."
    exit 1
fi

if k3d cluster list | grep -q "$client_name"; then
    echo "Cluster $client_name is available."
else
    echo "Cluster $client_name is not available, create it."
    k3d cluster create --image rancher/k3s:v1.28.2-k3s1 $client_name
fi

export KUBECONFIG="$(k3d kubeconfig write $client_name)"

echo "Create perfana-starter namespace"
kubectl create namespace perfana-starter
kubectl config set-context --current --namespace=perfana-starter

echo "Create afterburner SUT"
kubectl apply -f afterburner.yaml

echo "Start OpenTelemetry Collector"
kubectl apply -f otel-collector-gen.yaml

echo "Start Grafana Agent"
kubectl apply -f grafana-agent.yaml

echo "Start loadtest container"
kubectl create configmap loadtest-{{ loadTestTool }}.tar.gz --from-file=loadtest-{{ loadTestTool }}.tar.gz
kubectl create configmap pom.xml --from-file=pom.xml
kubectl apply -f loadtest.yaml

echo "Start perfana-secure-gateway"
helm_repo_name="perfana"

# Check if the repository is available
if helm repo list | grep -q "$helm_repo_name"; then
    echo "Helm repository $helm_repo_name is available, check for updates."
    helm repo update $helm_repo_name
else
    echo "Helm repository $helm_repo_name is not available, adding it."
    helm repo add $helm_repo_name https://$helm_repo_name.github.io/helm-charts
fi

helm install --namespace=perfana-starter perfana-secure-gateway perfana/perfana-secure-gateway --version 0.1.21 --values psg-values.yaml

echo "Wait for perfana-secure-gateway to be ready"
kubectl wait deployment perfana-secure-gateway --for condition=Available=True --timeout=120s

# Custom function to handle errors
handle_helm_error() {
    echo "Error occurred in helm test, check the logs:"
    kubectl logs -l app.kubernetes.io/instance=perfana-secure-gateway
    exit 1
}

# Set up the trap to catch ERR signals
trap 'handle_helm_error $?' ERR

echo "Test perfana-secure-gateway"
helm test perfana-secure-gateway

trap - ERR

echo ""
echo "Now you can run a test using:"
echo "export KUBECONFIG=\"$KUBECONFIG\""
echo "kubectl exec -it deploy/loadtest -- {{ loadTestToolMavenCommand }}"
