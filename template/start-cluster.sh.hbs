#!/usr/bin/env bash

set -o errexit

client_name={{ client }}

# we require a k8s cluster to be available

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    echo "kubectl is not installed. Please install kubectl first."
    exit 1
fi

# Check if helm is installed
if ! command -v helm &> /dev/null; then
    echo "Helm is not installed. Please install Helm first."
    exit 1
fi

set +o errexit
kubectx=$(kubectl config current-context)
# check with user for context and namespace
if [[ $? -ne 0 || -z $kubectx ]]; then
    echo "There is no k8s cluster available or selected. Please make sure you have a k8s cluster available."
    exit 1
fi
set -o errexit

echo "Create perfana-starter-{{ client }} namespace"
kubectl create namespace perfana-starter-{{ client }}
kubectl config set-context --current --namespace=perfana-starter-{{ client }}

echo "Create afterburner SUT"
kubectl apply -f afterburner.yaml

echo "Start OpenTelemetry Collector"
kubectl apply -f otel-collector-gen.yaml

echo "Start Grafana Agent"
kubectl apply -f grafana-agent.yaml

echo "Start loadtest container"
kubectl create configmap loadtest-{{ loadTestTool }}.tar.gz --from-file=loadtest-{{ loadTestTool }}.tar.gz
kubectl create configmap pom.xml --from-file=pom.xml
kubectl apply -f loadtest.yaml

echo "Start perfana-secure-gateway"
helm_repo_name="perfana"

# Check if the repository is available
if helm repo list | grep -q "$helm_repo_name"; then
    echo "Helm repository $helm_repo_name is available, check for updates."
    helm repo update $helm_repo_name
else
    echo "Helm repository $helm_repo_name is not available, adding it."
    helm repo add $helm_repo_name https://$helm_repo_name.github.io/helm-charts
fi

helm install --namespace=perfana-starter-{{ client }} perfana-secure-gateway perfana/perfana-secure-gateway --version 0.1.21 --values psg-values.yaml

echo "Wait for perfana-secure-gateway to be ready"
kubectl wait deployment perfana-secure-gateway --for condition=Available=True --timeout=120s

# Custom function to handle errors
handle_helm_error() {
    echo "Error occurred in helm test, check the logs:"
    kubectl -n perfana-starter-{{ client }} logs -l app.kubernetes.io/instance=perfana-secure-gateway
    echo "===================================================="
    echo "To test again: helm test perfana-secure-gateway"
    exit 1
}

# Set up the trap to catch ERR signals
trap 'handle_helm_error $?' ERR

echo "Test perfana-secure-gateway"
helm test perfana-secure-gateway

trap - ERR

echo ""
echo "Now you can run a test using:"
echo "kubectl -n perfana-starter-{{ client }} exec -it deploy/loadtest -- {{ loadTestToolMavenCommand }}"
