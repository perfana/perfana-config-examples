                    <eventSchedulerConfig>
                        <debugEnabled>${debug}</debugEnabled>
                        <schedulerEnabled>${eventsEnabled}</schedulerEnabled>
                        <scheduleScript>
                            ${eventScheduleScript}
                        </scheduleScript>
                        <testConfig>
                            <systemUnderTest>${systemUnderTest}</systemUnderTest>
                            <version>${version}</version>
                            <workload>${workload}</workload>
                            <testEnvironment>${testEnvironment}</testEnvironment>
                            <testRunId>${testRunId}</testRunId>
                            <buildResultsUrl>${buildResultsUrl}</buildResultsUrl>
                            <rampupTimeInSeconds>${rampupTimeInSeconds}</rampupTimeInSeconds>
                            <constantLoadTimeInSeconds>${constantLoadTimeInSeconds}</constantLoadTimeInSeconds>
                            <annotations>${annotations}</annotations>
                            <tags>${tags}</tags>
                        </testConfig>
                        <eventConfigs>
                            <eventConfig implementation="io.perfana.event.PerfanaEventConfig">
                                <name>PerfanaEvent</name>
                                <enabled>${perfanaEnabled}</enabled>
                                <perfanaUrl>${perfanaUrl}</perfanaUrl>
                                <apiKey>${apiKey}</apiKey>
                                <assertResultsEnabled>${assertResultsEnabled}</assertResultsEnabled>
                            </eventConfig>{{#jmeterConfig}}
                            <eventConfig implementation="io.perfana.events.commandrunner.CommandRunnerEventConfig">
                                <name>CommandRunnerJMeterToInflux</name>
                                <onStartTest>sh -c "./j2i target/jmeter/results --stop-timeout 120 -a ${influxUrl} -b {{client}}_jmeter -t ${testEnvironment} -y ${systemUnderTest} -d | awk '{print $2}'"</onStartTest>
                            </eventConfig>{{/jmeterConfig}}{{#gatlingConfig}}
                            <eventConfig implementation="io.perfana.events.commandrunner.CommandRunnerEventConfig">
                                <name>CommandRunnerGatlingToInflux</name>
                                <onStartTest>sh -c "./g2i target/gatling --stop-timeout 120 -a ${influxUrl} -u ${influxUser} -p ${influxPassword} -b {{client}}_gatling3 -t ${testEnvironment} -y ${systemUnderTest} -d | awk '{print $2}'"</onStartTest>
                            </eventConfig>{{/gatlingConfig}}{{#k6Config}}
                            <eventConfig implementation="io.perfana.events.commandrunner.CommandRunnerEventConfig">
                                <name>CommandRunnerK6ToInflux</name>
                                <onStartTest>sh -c "./k2i . --stop-timeout 120 -a ${influxUrl} -u ${influxUser} -p ${influxPassword} -b {{client}}_k6 -t ${testEnvironment} -y ${systemUnderTest} -d | awk '{print $2}'"</onStartTest>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.commandrunner.CommandRunnerEventConfig">
                                <name>Run k6 script</name>
                                <continueOnKeepAliveParticipant>true</continueOnKeepAliveParticipant>
                                <onStartTest>k6 run --out csv=test_results.csv \
                                    -e CONSTANT_LOAD_TIME=${constantLoadTimeInSeconds}s \
                                    -e RAMPUP_TIME=${rampupTimeInSeconds}s \
                                    -e START_RATE={{startRate}} \
                                    -e TARGET_RATE={{targetRate}} \
                                    -e TARGET_BASE_URL={{ sutConfig.baseUrl }} \
                                    -e SYSTEM_UNDER_TEST=${systemUnderTest} \
                                    -e TEST_ENVIRONMENT=${testEnvironment} \
                                    -e TEST_RUN_ID=${testRunId} \
                                    script.js
                                </onStartTest>
                                <onKeepAlive></onKeepAlive>
                                <onAbort></onAbort>
                                <onAfterTest></onAfterTest>
                            </eventConfig>{{/k6Config}}{{#springBootConfig}}
                            <eventConfig implementation="io.perfana.events.springboot.event.SpringBootEventConfig">
                                <name>ActuatorEventFrontend</name>
                                <tags>{{sutConfig.hostname}}</tags>
                                <actuatorBaseUrl>{{sutConfig.protocol}}://{{sutConfig.hostname}}:{{sutConfig.port}}/actuator</actuatorBaseUrl>
                                <actuatorEnvProperties>
                                    {{#properties}}{{.}}{{#unless @last}},
                                    {{/unless}}{{/properties}}
                                </actuatorEnvProperties>
                            </eventConfig>{{/springBootConfig}}
                        </eventConfigs>
                    </eventSchedulerConfig>
                    