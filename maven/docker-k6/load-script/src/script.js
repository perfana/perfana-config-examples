/*
 * Spring Boot REST API
 * Afterburner REST API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: peter.paul.bakker[at]stokpop.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.4.0-SNAPSHOT
 */

import http from "k6/http";
import { group, check, sleep } from "k6";
import { SharedArray } from 'k6/data';

const BASE_URL = __ENV.TARGET_BASE_URL;
const testRunId = __ENV.TEST_RUN_ID;
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 1;
// Global variables should be initialized.

export const options = {
    // discardResponseBodies: true,
    scenarios: {
        scenario1: {
            executor: 'ramping-arrival-rate',
            startRate: __ENV.START_RATE,
            timeUnit: '1s',
            exec: 'scenario1',
            preAllocatedVUs: 50,
            maxVUs: 500,
            stages: [
                { target: __ENV.TARGET_RATE, duration: __ENV.RAMPUP_TIME },
                { target: __ENV.TARGET_RATE, duration: __ENV.CONSTANT_LOAD_TIME },
            ],
        },
        scenario2: {
            executor: 'ramping-arrival-rate',
            startRate: __ENV.START_RATE,
            timeUnit: '1s',
            exec: 'scenario2',
            preAllocatedVUs: 50,
            maxVUs: 500,
            stages: [
                { target: __ENV.TARGET_RATE, duration: __ENV.RAMPUP_TIME },
                { target: __ENV.TARGET_RATE, duration: __ENV.CONSTANT_LOAD_TIME },
            ],
        },
    },
    systemTags: ['proto', 'subproto', 'status', 'method', 'url', 'name', 'group', 'check', 'error', 'error_code', 'tls_version', 'scenario', 'service', 'expected_response', 'rpc_type', 'vu', 'iter'],
    tags: {
        system_under_test: __ENV.SYSTEM_UNDER_TEST,
        test_environment: __ENV.TEST_ENVIRONMENT,
    }
};


export function scenario1() {

    group("simple_delay", () => {
        let duration = '350'; // specify value as there is no example value for this parameter in OpenAPI spec

        const params = {
            headers: {
                'perfana-test-run-id': `${testRunId}`,
                'perfana-request-name': 'simple_delay'
            },
            tags: { name: 'simple_delay' }

        };
        // Request No. 1
        {
            let url = BASE_URL + `/delay?duration=${duration}`;
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    sleep(Math.random() * 10);

    group("simple_cpu_burn", () => {
        let matrixSize = '133'; // specify value as there is no example value for this parameter in OpenAPI spec

        const params = {
            headers: {
                'perfana-test-run-id': `${testRunId}`,
                'perfana-request-name': 'simple_cpu_burn'
            },
            tags: { name: 'simple_cpu_burn' }

        };

        // Request No. 1
        {
            let url = BASE_URL + `/cpu/magic-identity-check?matrixSize=${matrixSize}`;
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    sleep(Math.random() * 10);

    group("remote_call_async", () => {
        let duration = 300; // specify value as there is no example value for this parameter in OpenAPI spec
        let count = '5'; // specify value as there is no example value for this parameter in OpenAPI spec

        const params = {
            headers: {
                'perfana-test-run-id': `${testRunId}`,
                'perfana-request-name': 'remote_call_async'
            },
            tags: { name: 'remote_call_async' }

        };

        // Request No. 1
        {
            let url = BASE_URL + `/remote/call-many?${count}=5&path=delay?duration=${duration}`;
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });
}

export function scenario2() {

    sleep(Math.random() * 10);

    group("flaky_call", () => {
        let flakiness = 5; // specify value as there is no example value for this parameter in OpenAPI spec
        let maxRandomDelay = 240; // specify value as there is no example value for this parameter in OpenAPI spec

        const params = {
            headers: {
                'perfana-test-run-id': `${testRunId}`,
                'perfana-request-name': 'flaky_call'
            },
            tags: { name: 'flaky_call' }

        };
        // Request No. 1
        {
            let url = BASE_URL + `/flaky?flakiness=${flakiness}&maxRandomDelay=${maxRandomDelay}`;
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

}